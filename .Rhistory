Rules.01.5 <- apriori (Transactions, parameter = list(supp = 0.01, conf = 0.5))
inspect(Rules.01.5)
Rules.005.65 <- apriori (Transactions, parameter = list(supp = 0.005, conf = 0.65))
Rules.005.65 <- apriori (Transactions, parameter = list(supp = 0.005, conf = 0.60))
inspect(Rules.005.65)
Rules.005.65 <- apriori (Transactions, parameter = list(supp = 0.005, conf = 0.60))
Rules.005.60 <- apriori (Transactions, parameter = list(supp = 0.005, conf = 0.60))
inspect(Rules.005.60)
arulesViz::ruleExplorer(Rules.005.60)
Rules <- apriori (Transactions, parameter = list(supp = 0.001, conf = 0.5))
# inspect rules using summary(), inspect() and inspectDT()
inspect(head(sort(rules, by ="lift"),5))
# inspect rules using summary(), inspect() and inspectDT()
inspect(head(sort(Rules, by ="lift"),5))
Rules <- apriori (Transactions, parameter = list(supp = 0.001, conf = 0.6))
Rules <- apriori (Transactions, parameter = list(supp = 0.01, conf = 0.5))
Rules <- apriori (Transactions, parameter = list(supp = 0.005, conf = 0.5))
inspect(Rules)
# inspect rules using summary(), inspect() and inspectDT()
inspect(head(sort(Rules, by ="lift"),5))
Rules <- apriori (Transactions, parameter = list(supp = 0.008, conf = 0.5))
Rules <- apriori (Transactions, parameter = list(supp = 0.005, conf = 0.5))
arulesViz::ruleExplorer(Rules)
# inspect rules using summary(), inspect() and inspectDT()
inspect(head(sort(Rules, by ="lift"),5))
summary(Rules)
inspectDT(Rules)
# inspect and improve, sort by metrics, support, confidence or lift.
inspect(sort(Rules, by = "lift"))
# inspect and improve, sort by metrics, support, confidence or lift.
inspect(sort(Rules, by = "lift", topN = 10))
# inspect and improve, sort by metrics, support, confidence or lift.
inspect(sort(Rules, by = "lift"),5)
# inspect and improve, sort by metrics, support, confidence or lift.
inspect(sort(Rules, by = "lift", 5))
# inspect and improve, sort by metrics, support, confidence or lift.
inspect(sort(Rules, by = "lift"))
#create a subset of all the rules of a certain item
ItemRulesAcerAspire <- subset(Rules, items %in% "Acer Aspire")
ItemRulesAcerAspire
inspect(ItemRulesAcerAspire)
inspect(ItemRulesAcerAspire, by ="lift")
inspect(ItemRulesAcerAspire, by ="lift")
inspect(sort(ItemRulesAcerAspire, by ="lift"))
# check for redundancy
is.redundant(Rules)
# check for redundancy
is.redundant(Rules)
# by using a plot
plot(Rules,
jitter = 0)
# by using a graph
plot(Rules, method = "graph",
control=list(type="items"))
plot(Rules, method = "two-key plot",
jitter = 0)
# Create matrix of subrules with confidence of 0.6 or higher
subrules.8 <- Rules[quality(Rules)$confidence > 0.8]
subrules.8
interactivematrix <- plot(subrules.8,
method = "matrix",
measure = "lift",
interactive = TRUE)
# Create matrix of subrules with confidence of 0.6 or higher
subrules.8 <- Rules[quality(Rules)$confidence > 0.8]
# Create matrix of subrules with confidence of 0.6 or higher
subrules.7 <- Rules[quality(Rules)$confidence > 0.7]
# Create matrix of subrules with confidence of 0.6 or higher
subrules.6 <- Rules[quality(Rules)$confidence > 0.6]
subrules.8
subrules.6
# Create matrix of subrules with confidence of 0.6 or higher
subrules.7 <- Rules[quality(Rules)$confidence > 0.7]
subrules.7
interactivematrix <- plot(subrules.8,
method = "matrix",
measure = "lift",
interactive = TRUE)
# by using a graph
plot(subrules.7,
method = "graph",
control=list(type="items"))
interactivematrix <- plot(subrules.7,
method = "matrix",
measure = "lift",
interactive = TRUE)
# Explore and visualize the rules
arulesViz::ruleExplorer(Rules)
#test
subrulestopN10lift <- head(sort(Rules, by="lift"), 10)
plot(subrulestopN10lift, method="graph",control=list(type="items",main=""))
# inspect rules using summary(), inspect() and inspectDT()
inspect(head(sort(Rules, by ="lift"),5))
# inspect rules using summary(), inspect() and inspectDT()
inspect(head(sort(Rules, by ="lift"),10))
Rules <- apriori (Transactions,
parameter = list(supp = 0.008, conf = 0.5))
inspect(Rules)
Rules <- apriori (Transactions,
parameter = list(supp = 0.01, conf = 0.5))
inspect(Rules)
# inspect rules using summary(), inspect() and inspectDT()
inspect(head(sort(Rules, by ="lift"),10))
summary(Rules)
inspectDT(Rules)
# inspect and improve, sort by metrics, support, confidence or lift.
inspect(sort(Rules, by = "lift"))
Rules <- apriori (Transactions,
parameter = list(supp = 0.008, conf = 0.5))
inspect(Rules)
# inspect rules using summary(), inspect() and inspectDT()
inspect(head(sort(Rules, by ="lift"),10))
# inspect rules using summary(), inspect() and inspectDT()
inspect(head(sort(Rules, by ="confidence"),10))
# inspect rules using summary(), inspect() and inspectDT()
inspect(head(sort(Rules, by ="lift"),10))
#create a subset of all the rules of a certain item
ItemRulesiMac <- subset(Rules, items %in% "iMac")
ItemRulesiMac
inspect(sort(ItemRulesiMac,
by ="lift"))
# check for redundancy
is.redundant(Rules)
Rules <- apriori (Transactions,
parameter = list(supp = 0.008, conf = 0.55))
inspect(Rules)
#explore rules
arulesViz::ruleExplorer(Rules)
Rules <- apriori (Transactions,
parameter = list(supp = 0.008, conf = 0.6))
inspect(Rules)
Rules <- apriori (Transactions,
parameter = list(supp = 0.008, conf = 0.5))
inspect(Rules)
#create a subset of all the rules of a certain item
ItemRulesHPLaptop <- subset(Rules, items %in% "HP Laptop")
ItemRulesHPLaptop
inspect(sort(ItemRulesHPLaptop,
by ="lift"))
arulesViz::ruleExplorer(ItemRulesHPLaptop)
# visualize the dataset
itemFrequencyPlot(Transactions,
type = "absolute",
col = "orange",
main = "Absolute Frequency Top 10",
topN = 10)
source('~/Google Drive/BSSA - data analytics/Module 2/Task 4/Market Basket Analysis/1.Libraries and exploration_Market basket analysis_ElseV1.R', echo=TRUE)
# visualize the dataset
itemFrequencyPlot(Transactions,
type = "absolute",
col = "orange",
main = "Absolute Frequency Top 10",
topN = 10)
head(Transactions 10)
head(Transactions, 10)
LowSellers <- tail(Transactions, 10)
# visualize the dataset
itemFrequencyPlot(LowSellers,
type = "absolute",
col = "orange",
main = "Absolute Frequency Lowsellers top 10",
topN = 10)
LowSellers <- tail(Transactions, 10)
LowSellers
LIST(LowSellers)
require("RcolorBrewer")
install.packages("RcolorBrewer")
require("RcolorBrewer")
library("RcolorBrewer")
install.packages("RcolorBrewer")
install.packages("RColorBrewer")
library("RcolorBrewer")
library("RColorBrewer")
require("RColorBrewer")
topN = 10)
topN = 10))
# visualize the dataset
itemFrequencyPlot(Transactions,
type = "absolute",
col = brewer.pal(8,'Pastel2'),
main = "Absolute Frequency Top 10",
topN = 10))
# visualize the dataset
itemFrequencyPlot(Transactions,
type = "absolute",
col = brewer.pal(8,'Pastel2'),
main = "Absolute Frequency Top 10",
topN = 10)
# visualize the dataset
itemFrequencyPlot(Transactions,
type = "absolute",
col = brewer.pal(8,'Pastel1'),
main = "Absolute Frequency Top 10",
topN = 10)
# visualize the dataset
itemFrequencyPlot(Transactions,
type = "absolute",
col = brewer.pal(8,'Pastel3'),
main = "Absolute Frequency Top 10",
topN = 10)
# visualize the dataset
itemFrequencyPlot(Transactions,
type = "absolute",
col = brewer.pal(10,'Pastel1'),
main = "Absolute Frequency Top 10",
topN = 10)
# visualize the dataset
itemFrequencyPlot(Transactions,
type = "absolute",
col = brewer.pal(10,'Pastel2'),
main = "Absolute Frequency Top 10",
topN = 10)
# visualize the dataset
itemFrequencyPlot(Transactions,
type = "absolute",
col = brewer.pal(10,'rainbow'),
main = "Absolute Frequency Top 10",
topN = 10)
source('~/Google Drive/BSSA - data analytics/Module 2/Task 4/Market Basket Analysis/1.Libraries and exploration_Market basket analysis_ElseV1 copy.R', echo=TRUE)
source('~/Google Drive/BSSA - data analytics/Module 2/Task 4/Market Basket Analysis/3.Use Apriori function to create rules copy.R', echo=TRUE)
Rules <- apriori (Transactions,
parameter = list(supp = 0.1, conf = 0.8))
inspect(Rules)
Rules <- apriori (Transactions,
parameter = list(supp = 0.05, conf = 0.8))
inspect(Rules)
Rules <- apriori (Transactions,
parameter = list(supp = 0.10, conf = 0.6))
inspect(Rules)
# inspect rules using summary(), inspect() and inspectDT()
inspect(head(sort(Rules, by ="lift"),18))
Rules <- apriori (Transactions,
parameter = list(supp = 0.10, conf = 0.7))
inspect(Rules)
# by using a plot
plot(Rules,
jitter = 0)
summary(Rules)
summary(Transactions) # summarized rows, colums, density, most frequent sold items
Rules <- apriori (Transactions,
parameter = list(supp = 0.01, conf = 0.9))
Rules <- apriori (Transactions,
parameter = list(supp = 0.001, conf = 0.9))
Rules <- sort(Rules, by='confidence', decreasing = TRUE)
inspect(Rules)
Rules <- apriori (Transactions,
parameter = list(supp = 0.001, conf = 0.8))
Rules <- apriori (Transactions,
parameter = list(supp = 0.01, conf = 0.8))
Rules <- sort(Rules, by='confidence', decreasing = TRUE)
inspect(rules[1:10])
inspect(Rules[1:10])
source('~/Google Drive/BSSA - data analytics/Module 2/Task 4/Market Basket Analysis/1.Libraries and exploration_Market basket analysis_ElseV1.R', echo=TRUE)
source('~/Google Drive/BSSA - data analytics/Module 2/Task 4/Market Basket Analysis/2.Visualize the dataset.R', echo=TRUE)
Rules <- apriori (Transactions,
parameter = list(supp = 0.01, conf = 0.8))
Rules <- apriori (Transactions,
parameter = list(supp = 0.01, conf = 0.6))
Rules <- sort(Rules, by='confidence', decreasing = TRUE)
inspect(Rules[1:10])
Rules <- apriori (Transactions,
parameter = list(supp = 0.008, conf = 0.6))
Rules <- sort(Rules, by='confidence', decreasing = TRUE)
inspect(Rules)
Rules <- sort(Rules, by='lift', decreasing = TRUE)
Rules <- apriori (Transactions,
parameter = list(supp = 0.006, conf = 0.6))
Rules <- sort(Rules, by='lift', decreasing = TRUE)
inspect(Rules)
Rules <- apriori (Transactions,
parameter = list(supp = 0.006, conf = 0.5))
Rules <- sort(Rules, by='lift', decreasing = TRUE)
inspect(Rules)
Rules <- sort(Rules, by='count', decreasing = TRUE)
Rules <- apriori (Transactions,
parameter = list(supp = 0.006, conf = 0.8))
Rules <- sort(Rules, by='count', decreasing = TRUE)
inspect(Rules)
Rules <- apriori (Transactions,
parameter = list(supp = 0.006, conf = 0.6))
Rules <- sort(Rules, by='count', decreasing = TRUE)
inspect(Rules)
Rules <- apriori (Transactions,
parameter = list(supp = 0.008, conf = 0.6))
Rules <- sort(Rules, by='count', decreasing = TRUE)
inspect(Rules)
Rules <- apriori (Transactions,
parameter = list(supp = 0.008, conf = 0.5))
Rules <- sort(Rules, by='count', decreasing = TRUE)
inspect(Rules)
Rules <- apriori (Transactions,
parameter = list(supp = 0.01, conf = 0.4))
Rules <- sort(Rules, by='count', decreasing = TRUE)
inspect(Rules)
source('~/Google Drive/BSSA - data analytics/Module 2/Task 4/Market Basket Analysis/1.Libraries and exploration_Market basket analysis_ElseV1 copy.R', echo=TRUE)
inspect("Accessories")
inspect(Accessories)
labels(Transactions)
itemFrequency(Transactions)
write.table(itemFrequency(Transactions))
itemFrequency(Transactions
itemFrequency(Transactions)
itemFrequency(Transactions)
itemFrequencyPlot(Transactions)
# visualize the dataset
itemFrequencyPlot(Transactions,
type = "absolute",
col = brewer.pal(10,'Pastel2'),
main = "Absolute Frequency Top 10",
topN = 15)
# visualize the dataset
itemFrequencyPlot(Transactions,
type = "absolute",
main = "Absolute Frequency Top 10",
topN = 15)
library("RColorBrewer")
# visualize the dataset
itemFrequencyPlot(Transactions,
type = "absolute",
col = brewer.pal(10,'Pastel2'),
main = "Absolute Frequency Per Category",
topN = 17)
# visualize the dataset
itemFrequencyPlot(Transactions,
type = "absolute",
col = brewer.pal(17,'Pastel2'),
main = "Absolute Frequency Per Category",
topN = 17)
# visualize the dataset
itemFrequencyPlot(Transactions,
type = "absolute",
col = brewer.pal(2,'Pastel2'),
main = "Absolute Frequency Per Category",
topN = 17)
# visualize the dataset
itemFrequencyPlot(Transactions,
type = "absolute",
col = brewer.pal(1,'Pastel2'),
main = "Absolute Frequency Per Category",
topN = 17)
# visualize the dataset
itemFrequencyPlot(Transactions,
type = "absolute",
col = peachpuff4,
main = "Absolute Frequency Per Category",
topN = 17)
install.packages("colorspace")
install.packages("colorspace")
library("colorspace")
# visualize the dataset
itemFrequencyPlot(Transactions,
type = "absolute",
col = rainbow_hcl(4),
main = "Absolute Frequency Per Category",
topN = 17)
# visualize the dataset
itemFrequencyPlot(Transactions,
type = "absolute",
col = rainbow_hcl(17),
main = "Absolute Frequency Per Category",
topN = 17)
# visualize the dataset
itemFrequencyPlot(Transactions,
type = "relative",
col = rainbow_hcl(17),
main = "Absolute Frequency Per Category",
topN = 17)
# visualize the dataset
itemFrequencyPlot(Transactions,
type = "relative",
col = rainbow_hcl(17),
main = "Relative Frequency Per Category",
topN = 17)
> itemFrequency(Transactions)
itemFrequency(Transactions)
itemFrequency(Transactions,)
itemFrequency(Transactions, type= "relative")
itemFrequency(Transactions, type= "absolute")
read.csv("testblackwell.csv")
read.csv("testblackwell.csv", sep = ":")
read.csv("testblackwell.csv", sep = ";")
read.csv("testblackwell.csv", sep = ";" skip= 0)
read.csv("testblackwell.csv", sep = ";", skip= 0)
read.csv("testblackwell.csv", sep = ";")
BlackwellProd <- read.csv("testblackwell.csv", sep = ";")
library("ggplot2")
require("RColorBrewer")
library("colorspace")
ggplot(BlackwellProd|)
ggplot(BlackwellProd)
geom_bar() +
labs(y = "Count",
title = "test")
ggplot(BlackwellProd, aes(x=CATEGORY.BLACKWELL),
geom_bar(),
labs(y = "Count",
title = "test"))
hist(BlackwellProd)
hist(BlackwellProd$VOLUME)
BlackwellProd$CATEGORY.BLACKWELL <- as.integer(BlackwellProd$CATEGORY.BLACKWELL)
hist(BlackwellProd)
hist(BlackwellProd$CATEGORY.BLACKWELL)
source('~/Google Drive/BSSA - data analytics/Module 2/Task 4/Market Basket Analysis/1.Libraries and exploration_Market basket analysis_ElseV1.R', echo=TRUE)
source('~/Google Drive/BSSA - data analytics/Module 2/Task 4/Market Basket Analysis/1.Libraries and exploration_Market basket analysis_ElseV1.R', echo=TRUE)
# Explore and visualize the rules by plots, graphs and tables all at once:
arulesViz::ruleExplorer(Rules)
Rules <- apriori (Transactions,
parameter = list(supp = 0.008, conf = 0.5))
inspect(Rules)
#explore rules
arulesViz::ruleExplorer(Rules)
Rules <- apriori (Transactions,
parameter = list(supp = 0.008, conf = 0.4))
inspect(Rules)
#explore rules
arulesViz::ruleExplorer(Rules)
Rules <- apriori (Transactions,
parameter = list(supp = 0.008, conf = 0.5))
inspect(Rules)
#explore rules
arulesViz::ruleExplorer(Rules)
# check for redundancy
is.redundant(Rules)
#explore rules
arulesViz::ruleExplorer(Rules)
#explore rules
arulesViz::ruleExplorer(Rules)
#explore rules
arulesViz::ruleExplorer(Rules)
#explore rules
arulesViz::ruleExplorer(Rules)
#explore rules
arulesViz::ruleExplorer(Rules)
#explore rules
arulesViz::ruleExplorer(Rules)
source('~/Google Drive/BSSA - data analytics/Module 2/Task 4/Market Basket Analysis/1.Libraries and exploration_Market basket analysis_ElseV1.R', echo=TRUE)
Rules <- apriori (Transactions,
parameter = list(supp = 0.01, conf = 0.4))
inspect(Rules)
#explore rules
arulesViz::ruleExplorer(Rules)
Rules <- apriori (Transactions,
parameter = list(supp = 0.1, conf = 0.))
inspect(Rules)
Rules <- apriori (Transactions,
parameter = list(supp = 0.1, conf = 0.1))
inspect(Rules)
Rules <- apriori (Transactions,
parameter = list(supp = 0.1, conf = 0.2))
inspect(Rules)
Rules <- apriori (Transactions,
parameter = list(supp = 0.01, conf = 0.2))
inspect(Rules)
#explore rules
arulesViz::ruleExplorer(Rules)
Rules <- apriori (Transactions,
parameter = list(supp = 0.008, conf = 0.55))
inspect(Rules)
#explore rules
arulesViz::ruleExplorer(Rules)
Rules <- apriori (Transactions,
parameter = list(supp = 0.008, conf = 0.50))
inspect(Rules)
#explore rules
arulesViz::ruleExplorer(Rules)
source('~/Google Drive/BSSA - data analytics/Module 2/Task 4/Market Basket Analysis/1.Libraries and exploration_Market basket analysis_ElseV1.R', echo=TRUE)
source('~/Google Drive/BSSA - data analytics/Module 2/Task 4/Market Basket Analysis/3.Use Apriori function to create rules.R', echo=TRUE)
Rules <- apriori (Transactions,
parameter = list(supp = 0.008, conf = 0.4))
inspect(Rules)
#explore rules
arulesViz::ruleExplorer(Rules)
source('~/Google Drive/BSSA - data analytics/Module 2/Task 4 - market basket analysis/Market Basket Analysis/scripts/1.Libraries and dataframe market basket analysis_V2.R', echo=TRUE)
source('~/Google Drive/BSSA - data analytics/Module 2/Task 4 - market basket analysis/Market Basket Analysis/scripts/1.Libraries and dataframe market basket analysis_V2.R', echo=TRUE)
Transactions <- read.transactions("/data/ElectronidexTransactions2017.csv",
format = "basket",
sep = ",",
skip = 0,
rm.duplicates = TRUE)
getwd()
Transactions <- read.transactions("/Data/ElectronidexTransactions2017.csv",
format = "basket",
sep = ",",
skip = 0,
rm.duplicates = TRUE)
# install packages for Market Basket Analysis and visualization
library("arules")
library("arulesViz")
library("gplots")
library("prabclus")
library("DEoptimR")
library("trimcluster")
library("graphics")
library("RColorBrewer")
getwd()
setwd("/Users/else/Google Drive/BSSA - data analytics/Module 2/Task 4 - market basket analysis/Market Basket Analysis")
Transactions <- read.transactions("/Data/ElectronidexTransactions2017.csv",
format = "basket",
sep = ",",
skip = 0,
rm.duplicates = TRUE)
Transactions <- read.transactions("/data/ElectronidexTransactions2017.csv",
format = "basket",
sep = ",",
skip = 0,
rm.duplicates = TRUE)
setwd("/Users/else/Google Drive/BSSA - data analytics/Module 2/Task 4 - market basket analysis/Market Basket Analysis")
Transactions <- read.transactions("data/ElectronidexTransactions2017.csv",
format = "basket",
sep = ",",
skip = 0,
rm.duplicates = TRUE)
